const axios = require('axios');

// Mock function to check document permissions using Confluence API
async function checkPermissionForDocument(contentId, userId) {
  const confluenceAPIUrl = `https://your-confluence-instance/rest/api/content/${contentId}/restriction/byOperation`;
  const pat = 'your_personal_access_token';  // Replace with your PAT
  
  try {
    const response = await axios.get(confluenceAPIUrl, {
      headers: {
        'Authorization': `Bearer ${pat}`
      }
    });
    
    const restrictions = response.data.view.restrictions.group;
    // For simplicity, we assume user 'abc' is part of 'confluence-users'
    return restrictions.some(group => group.name === 'confluence-users');
    
  } catch (error) {
    console.error(`Error checking permission for contentId ${contentId}:`, error.message);
    return false; // Assume no permission if there's an error
  }
}

router.get("/kbs/:id/search", async (req, res) => {
  try {
    const query = req.query.query;
    let kb_id = req.params.id;

    // Fetch knowledge base info
    let kb = await queryDatabase('SELECT collection_id, collection_name, name FROM ama_nip_kb kb WHERE kb.ID = $(kb_id);');
    kb = kb[0];

    let collectionName = kb.collection_name + "_" + config.env;
    let embeddingFunction = new NPCEmbedding();

    const collection = await chroma.getCollection({
      name: collectionName,
      embeddingFunction: embeddingFunction,
    });

    // Query the collection
    let response = await collection.query({ queryTexts: query, nResults: 10 });

    let documents = [];

    for (let i = 0; i < response["ids"][0].length; i++) {
      let docId = response["ids"][0][i];

      // Check if the user 'abc' has permission to view this document
      let hasPermission = await checkPermissionForDocument(docId, 'abc');

      if (hasPermission) {
        documents.push({
          id: docId,
          metadata: response["metadatas"][0][i],
          pageContent: response["documents"][0][i],
        });
      }
    }

    // Send only the documents that the user has permission to view
    res.send(documents);

  } catch (e) {
    res.status(500).send("Could not process the query");
  }
});