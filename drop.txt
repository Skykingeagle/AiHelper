import React, { useState, useEffect } from "react";
import { createBrowserRouter, RouterProvider } from "react-router-dom";
import { ThemeProvider } from "@mui/material/styles";
import Backdrop from "@mui/material/Backdrop";
import CircularProgress from "@mui/material/CircularProgress";
import theme from "./theme";
import Root from "./Root";
import ErrorPage from "./ErrorPage";
import KnowledgeBaseView from "./KnowledgeBaseView";
import KnowledgeBasePage from "./KnowledgeBasePage";
import KnowledgeBaseOverview from "./KnowledgeBaseOverview";
import KnowledgeBaseSearch from "./KnowledgeBaseSearch";
import KnowledgeBaseAiChat from "./KnowledgeBaseAiChat";

const router = createBrowserRouter([
  {
    path: "",
    element: <div>Redirecting to home...</div>,
    errorElement: <ErrorPage />,
  },
  {
    path: `/${BASE_URL}`,
    element: <Root />,
    errorElement: <ErrorPage />,
    children: [
      {
        path: `/${BASE_URL}`,
        element: <KnowledgeBaseView />,
        errorElement: <ErrorPage />,
      },
      {
        path: `/${BASE_URL}/kbs/:kbId`,
        element: <KnowledgeBasePage />,
        errorElement: <ErrorPage />,
        children: [
          {
            path: `/${BASE_URL}/kbs/:kbId`,
            element: <KnowledgeBaseOverview />,
            errorElement: <ErrorPage />,
          },
          {
            path: `/${BASE_URL}/kbs/:kbId/search`,
            element: <KnowledgeBaseSearch />,
            errorElement: <ErrorPage />,
          },
          {
            path: `/${BASE_URL}/kbs/:kbId/aichat`,
            element: <KnowledgeBaseAiChat />,
            errorElement: <ErrorPage />,
          },
        ],
      },
    ],
  },
]);

export default function App() {
  // State to track if navigation is loading
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const handleNavigationStart = () => setLoading(true);
    const handleNavigationEnd = () => setLoading(false);

    // Subscribe to navigation events
    router.subscribe((event) => {
      if (event.type === "navigation-start") {
        handleNavigationStart();
      } else if (event.type === "navigation-end") {
        handleNavigationEnd();
      }
    });

    // Cleanup subscription
    return () => {
      router.unsubscribe();
    };
  }, []);

  return (
    <React.StrictMode>
      <ThemeProvider theme={theme}>
        {/* Backdrop to indicate loading */}
        <Backdrop
          sx={{ color: "#fff", zIndex: (theme) => theme.zIndex.drawer + 1 }}
          open={loading}
        >
          <CircularProgress color="inherit" />
        </Backdrop>
        <RouterProvider router={router} />
      </ThemeProvider>
    </React.StrictMode>
  );
}